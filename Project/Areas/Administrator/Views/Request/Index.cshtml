@model ViewModels.Areas.Administrator.Cement.CementViewModel

@{
    string strTitle =
        string.Format("{0} {1}",
        Resources.Action.ListOf,
        Resources.Model.Request.EntitiesName);
}
<style>
    input#CompanyName {
        color: gray;
        padding: 6px 12px;
        border: 1px solid #cccccc;
        border-radius: 4px;
    }

    .k-icon {
        background-image: none !important;
        width: auto !important;
        height: auto !important;
    }
</style>
<link href="http://kendo.cdn.telerik.com/2014.2.716/styles/kendo.common.min.css" rel="stylesheet" />
<link href="http://kendo.cdn.telerik.com/2014.2.716/styles/kendo.default.min.css" rel="stylesheet" />
<script src="http://kendo.cdn.telerik.com/2014.2.716/js/jquery.min.js"></script>
<script src="http://kendo.cdn.telerik.com/2014.2.716/js/kendo.ui.core.min.js"></script>
<script>
    // 1- تعریف DataSource اولیه
    var varDataSource = new kendo.data.DataSource({
        pageSize: 10,
        data: []
    });

    // 2- ساخت Grid
    $("#grid").kendoGrid({
        dataSource: varDataSource,
        sortable: true,
        filterable: true,
        resizable: true,
        scrollable: { virtual: false },
        pageable: {
            refresh: true,
            input: true,
            numeric: true,
            pageSizes: [5, 10, 25, 50, 100]
        },
        mobile: true,
        columnMenu: true,
        columns: [
            { field: "InvoiceNumber", title: "شماره فاکتور", width: "120px" },
            { field: "StringProductName", title: "نام محصول", width: "150px" },
            { field: "StringProductType", title: "نوع محصول", width: "150px" },
            { field: "StringPackageType", title: "نوع بسته بندی", width: "150px" },
            { field: "StringFactoryName", title: "کارخانه", width: "150px" },
            { field: "Tonnage", title: "تن", width: "100px" },
            { field: "AmountPaid", title: "مبلغ پرداختی", width: "120px" },
            { field: "BuyerMobile", title: "شماره خریدار", width: "120px" },
            { field: "Address", title: "آدرس", width: "200px" },
            { field: "Description", title: "توضیحات", width: "200px" },
            { field: "MahalTahvil", title: "محل تحویل", width: "150px" },
            { field: "StringInsertDateTime", title: "تاریخ ثبت", width: "150px" },
            {
                title: "عملیات",
                width: "120px",
                template: function (dataItem) {
                    return `
                    <a class="btn-blank" href="/Administrator/Request/display/${dataItem.Id}">
                        <img src="../../../Content/Icon/display.png"/>
                    </a>
                    <a href="/Administrator/Request/Edit/${dataItem.Id}">
                        <img src="../../../Content/Icon/edit.png"/>
                    </a>
                `;
                }
            }
        ]
    });

    // 3- گرفتن نمونه Grid
    var grid = $("#grid").data("kendoGrid");

    // 4- تنظیم autoFit در dataBound
    grid.bind("dataBound", function () {
        grid.columns.forEach(col => {
            if (col.field) {
                grid.autoFitColumn(col.field);
            }
        });
    });

    // 5- رویداد کلیک دکمه سرچ
    $("button#btnSearch").click(function () {
        var varDataSource = new kendo.data.DataSource({
            pageSize: 10,
            serverPaging: true,
            serverSorting: true,
            serverFiltering: true,
            transport: {
                read: {
                    type: "POST",
                    dataType: "json",
                    url: "/Administrator/Request/Search",
                    data: {
                        InvoiceNumber: () => $("input#InvoiceNumber").val(),
                        BuyerMobile: () => $("input#BuyerMobile").val(),
                        ProductName: () => $("select#ProductName").val(),
                        ProductType: () => $("select#ProductType").val(),
                        PackageType: () => $("select#PackageType").val(),
                        FactoryName: () => $("select#FactoryName").val(),
                        Tonnage: () => $("select#Tonnage").val(),
                        stringFinalApprove: () => $("select#stringFinalApprove").val(),
                        Province: () => $("select#Province").val(),
                        City: () => $("select#City").val(),
                        StartDate: () => $("input#StartDate").val(),
                        EndDate: () => $("input#EndDate").val(),
                        PayStartDate: () => $("input#PayStartDate").val(),
                        PayEndDate: () => $("input#PayEndDate").val(),
                        FromAmount: () => {
                            var number = $("#FromAmount").val().replace(/,/g, "");
                            $("#FromAmount").val(number);
                            return number;
                        },
                        ToAmount: () => {
                            var number = $("#ToAmount").val().replace(/,/g, "");
                            $("#ToAmount").val(number);
                            return number;
                        }
                    }
                }
            },
            schema: {
                data: e => e.Data,
                total: e => e.Total
            }
        });

        grid.setDataSource(varDataSource);
    });

</script>


<section id="Requests" class="form-horizontal" role="form">
    <div class="panel panel-info">
        <div class="panel-heading" id="SearchPanelHeader">
            جستجو ( کلیک کنید...!)
        </div>
        <div class="col-md-12 panel-body" id="SearchPanelBody" style="display: none;">
            <div class="col col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductName, new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.ProductName, null,
                        Resources.Caption.SelectAnItem, new { @class = "form-control", @onchange = "onChangeProductName()" })
                        @Html.ValidationMessageFor(model => model.ProductName)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PackageType, new { @class = "col-md-4 control-label" })
                    <div class="col-md-8" id="DivPackageTypeId">
                        @Html.DropDownListFor(model => model.PackageType, null,
                       Resources.Caption.SelectAnItem, new { @class = "form-control", @onchange = "onChangePackageType()" })
                        @Html.ValidationMessageFor(model => model.PackageType)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Province, new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.Province, null,
                        Resources.Caption.SelectAnItem, new { @class = "form-control", @onchange = "onChangeProvince()" })
                        @Html.ValidationMessageFor(model => model.Province)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Tonnage, new { @class = "col-md-4 control-label" })
                    <div class="col-md-8" id="DivTonnageId">
                        @Html.TextBoxFor(model => model.Tonnage, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Tonnage)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.StartDate, new { @class = "col-md-4 control-label" })
                    <div class="col col-md-8">
                        @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PayStartDate, new { @class = "col-md-4 control-label" })
                    <div class="col col-md-8">
                        @Html.TextBoxFor(model => model.PayStartDate, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FromAmount, new { @class = "col-md-4 control-label" })
                    <div class="col col-md-8">
                        @Html.TextBoxFor(model => model.FromAmount, new { @class = "form-control", @onkeypress = "return AllowNumbersOnly(event)", @onkeyup = "javascript:this.value=Comma(this.value);" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.BuyerMobile, new { @class = "col-md-4 control-label" })
                    <div class="col col-md-8">
                        @Html.TextBoxFor(model => model.BuyerMobile, new { @class = "form-control", @onkeypress = "return AllowNumbersOnly(event)" })
                    </div>
                </div>
            </div>
            <div class="col col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductType, new { @class = "col-md-4 control-label" })
                    <div class="col-md-8" id="DivProductTypeId">
                        @Html.DropDownListFor(model => model.ProductType, null,
                       Resources.Caption.SelectAnItem, new { @class = "form-control", @onchange = "onChangeProductType()" })
                        @Html.ValidationMessageFor(model => model.ProductType)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FactoryName, new { @class = "col-md-4 control-label" })
                    <div class="col-md-8" id="DivFactoryNameId">
                        @Html.DropDownListFor(model => model.FactoryName, null, Resources.Caption.SelectAnItem, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.FactoryName)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.City, new { @class = "col-md-4 control-label" })
                    <div class="col-md-8" id="DivCityId">
                        @Html.DropDownListFor(model => model.City, null, Resources.Caption.SelectAnItem, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.City)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.InvoiceNumber, new { @class = "col-md-4 control-label" })
                    <div class="col col-md-8">
                        @Html.TextBoxFor(model => model.InvoiceNumber, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EndDate, new { @class = "col-md-4 control-label" })
                    <div class="col col-md-8">
                        @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PayEndDate, new { @class = "col-md-4 control-label" })
                    <div class="col col-md-8">
                        @Html.TextBoxFor(model => model.PayEndDate, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ToAmount, new { @class = "col-md-4 control-label" })
                    <div class="col col-md-8">
                        @Html.TextBoxFor(model => model.ToAmount, new { @class = "form-control", @onkeypress = "return AllowNumbersOnly(event)", @onkeyup = "javascript:this.value=Comma(this.value);" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.stringFinalApprove, new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.stringFinalApprove, null, Resources.Caption.SelectAnItem, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-3 col-md-8">
                    <button type="button" id="btnSearch" name="btnSearch" class="btn btn-primary btn-icon btn-green icon-alarmclock">@Resources.OPS.Button.Search</button>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="panel panel-primary">
        <div class="panel-heading">
            @strTitle
        </div>
        <div class="col-md-12 panel-body">
            <div class="col-md-12">
                <div class="row">
                    <div style="float:left;">
                        <a class="btn btn-default col-md-2 " data-toggle="tooltip" data-placement="top" title="@(Resources.Action.BackToMain)"
                           href="/HomeMain/Main/" style="float : left;width:150px;">
                            <span style="float:right;">@Resources.Action.BackToMain</span><img style="float:left;" src='../../../Content/Icon/Back.png' />
                        </a>
                    </div>
                </div>
                <br />
                <div class="table-responsive">
                    <div id="grid"></div>
                </div>
                <br />
                <div class="row">
                </div>
            </div>
        </div>
        <div class="panel-footer"></div>
    </div>
</section>


<style>
    #grid .k-grid-header th,
    #grid .k-grid-content td {
        box-sizing: border-box;
        padding: 6px 10px;
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    }


    /* راست‌چین کردن کل Grid */
    #grid {
        direction: rtl;
        text-align: right;
    }

        /* جلوگیری از کوچک و بزرگ شدن ستون‌ها */
        #grid .k-grid-header th {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-align: right;
        }

        #grid .k-grid-content td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-align: right;
        }

    /* ریسپانسیو موبایل */
    @@media (max-width: 768px) {
        #grid .k-grid-header, #grid .k-grid-content {
            font-size: 12px;
        }
    }
</style>
<script type="text/javascript">
    function onChangeProvince() {
        $.ajax({
            url: '/Administrator/HeadOfFactor/GetCities',
            type: 'post',
            data: { provinceId: $("#Province").val() },
            success: function (data) {

                $("#DivCityId").empty();

                var select = $("<select class='form-control' id='City' name='City' data-rel='chosen'>");
                var option1 = "<option value='@System.Guid.Empty'>" + "از لیست انتخاب نمایید" + "</option>";
                select.append(option1);

                $.each(data, function (i, city) {
                    var option=('<option value="' + city.Id + '"> ' + city.Name + '</option>');
                    select.append(option);
                })

                $("#DivCityId").append(select);
                $('#City>option:eq(1)').prop('selected', true);
            }
        });
    }


    function onChangeProductName() {
        $.ajax({
            url: '/Administrator/Cement/GetProductType',
            type: 'post',
            data: { ProductNameId: $("#ProductName").val() },
            success: function (data) {

                $("#DivProductTypeId").empty();

                var select = $("<select class='form-control' onchange = 'onChangeProductType()' id='ProductType' name='ProductType' data-rel='chosen'>");
                var option1 = "<option value='@System.Guid.Empty'>" + "از لیست انتخاب نمایید" + "</option>";
                select.append(option1);
                $.each(data, function (i, ProductType) {
                    var option = ('<option value="' + ProductType.Id + '"> ' + ProductType.Name + '</option>');
                    /// baraye inke avalin id baraye loade Select badi estefade shavad
                    if (i == 0) {
                        onChangeProductType(ProductType.Id);
                    }
                    select.append(option);
                })

                $("#DivProductTypeId").append(select);
                $('#ProductType>option:eq(1)').prop('selected', true);
            }
        });

        $.ajax({
            url: '/Administrator/Cement/GetFactoryName',
            type: 'post',
            data: { ProductNameId: $("#ProductName").val() },
            success: function (data) {

                $("#DivFactoryNameId").empty();

                var select = $("<select class='form-control' id='FactoryName' name='FactoryName' data-rel='chosen'>");
                var option1 = "<option value='@System.Guid.Empty'>" + "از لیست انتخاب نمایید" + "</option>";
                select.append(option1);

                $.each(data, function (i, FactoryName) {
                    var option = ('<option value="' + FactoryName.Id + '"> ' + FactoryName.Name + '</option>');
                    select.append(option);
                })

                $("#DivFactoryNameId").append(select);
                // baraye az ghabl entekhab shodane item
                $('#FactoryName>option:eq(1)').prop('selected', true);
            }
        });
    }

    function onChangeProductType(ProductTypee) {
        debugger;
        if (ProductTypee == undefined) { /// baraye inke dafe aval az loade safhe bekhoone
            ProductTypee = $("#ProductType").val();
        }
        $.ajax({
            url: '/Administrator/Cement/GetPackageType',
            type: 'post',
            data: { ProductTypeId: ProductTypee },
            success: function (data) {

                $("#DivPackageTypeId").empty();

                var select = $("<select class='form-control' onchange = 'onChangePackageType()'  id='PackageType' name='PackageType' data-rel='chosen'>");
                var option1 = "<option value='@System.Guid.Empty'>" + "از لیست انتخاب نمایید" + "</option>";
                select.append(option1);

                $.each(data, function (i, PackageType) {
                    var option = ('<option value="' + PackageType.Id + '"> ' + PackageType.Name + '</option>');
                    select.append(option);
                })

                $("#DivPackageTypeId").append(select);
                // baraye az ghabl entekhab shodane item
                $('#PackageType>option:eq(1)').prop('selected', true);
                onChangePackageType();
            }
        });
    }

    function onChangePackageType() {
        debugger;
        $.ajax({
            url: '/Administrator/Cement/GetTonnage',
            type: 'post',
            data: { PackageTypeId: $("#PackageType").val() },
            success: function (data) {

                $("#DivTonnageId").empty();

                var select = $("<select class='form-control' id='Tonnage' name='Tonnage' data-rel='chosen'>");
                var option1 = "<option value='@System.Guid.Empty'>" + "از لیست انتخاب نمایید" + "</option>";
                select.append(option1);

                $.each(data, function (i, Tonnage) {
                    var option = ('<option value="' + Tonnage.Id + '"> ' + Tonnage.Name + '</option>');
                    select.append(option);
                })

                $("#DivTonnageId").append(select);
                // baraye az ghabl entekhab shodane item
                $('#Tonnage>option:eq(1)').prop('selected', true);
            }
        });
    }




</script>